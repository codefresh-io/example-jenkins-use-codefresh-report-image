pipeline {
    
    agent any
    stages {
        stage('Clone repository') {               
            steps {
                checkout scm 
            }
        }
        stage ('Build & Push ') {
            environment {
                IMAGE_NAME=credentials('IMAGE_NAME')
                CF_IMAGE="${env.IMAGE_NAME}:latest"
            }
            steps {
                sh 'echo "Building $CF_IMAGE"'
                script {
                    def app
                    app = docker.build("${env.IMAGE_NAME}")
                    // require credentials to be stored under DOCKERHUB
                    docker.withRegistry('https://registry.hub.docker.com', 'DOCKERHUB') {   
                        app.push("${BUILD_NUMBER}")      
                        app.push("latest")      
                    }
                }
                sh '''
                    # test we have image in repository.
                    docker pull $CF_IMAGE
                    '''
            }
        }
        
        stage('report image') {
            environment {
                IMAGE_NAME=credentials('IMAGE_NAME')
                CF_IMAGE="${env.IMAGE_NAME}:latest"
                CF_API_KEY=credentials('CF_API_KEY')
                CF_CONTAINER_REGISTRY_INTEGRATION='docker'
                CF_JIRA_INTEGRATION='jira'
                CF_JIRA_MESSAGE='''
                        A message with embedded issue ( i.e. CR-11027 )
                        that would be use query jira for the ticket '''
                CF_JIRA_PROJECT_PREFIX='CR'
                CF_GITHUB_TOKEN=credentials('CF_GITHUB_TOKEN')
                CF_WORKFLOW_NAME="${env.JOB_NAME}"
                CF_WORKFLOW_URL="${env.BUILD_URL}"
            }
            agent {
                docker { 
                    registryUrl 'https://quay.io'
                    registryCredentialsId 'quay-id'
                    image "quay.io/codefresh/codefresh-report-image:latest"
                }
            }
            steps {
                sh '''
                    # add git branch
                    export CF_GIT_PROVIDER="${CF_GIT_PROVIDER:-github}"
                    export CF_GIT_BRANCH="${GIT_BRANCH#*/}"
                    WITHOUT_POSTFIX="${GIT_URL%.*}"
                    export CF_GIT_REPO="${WITHOUT_POSTFIX#*//*/}"
                    cd /code && yarn start'''
            }
        }
    }
}
